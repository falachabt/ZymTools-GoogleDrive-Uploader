# 🚀 Auto-Release CORRIGÉ - Permissions et API Moderne
name: Auto Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version à releaser (ex: v1.0.0)'
        required: true
        default: 'v1.0.0'
      build_type:
        description: 'Type de build'
        required: true
        default: 'public'
        type: choice
        options:
          - public    # Build sans credentials (distributable)
          - private   # Build avec credentials (usage personnel)

# 🔑 PERMISSIONS CRUCIALES - C'était ça le problème !
permissions:
  contents: write    # Pour créer des releases et tags
  actions: read      # Pour lire les actions
  packages: write    # Pour les packages (optionnel)

env:
  APP_NAME: "ZymoSync"
  PYTHON_VERSION: "3.9"

jobs:
  build-and-release:
    name: 🔨 Build et Release (CORRIGÉ)
    runs-on: windows-latest

    steps:
    # ===== ÉTAPE 1: PRÉPARATION =====
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🏷️ Extraire la version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
          BUILD_TYPE="public"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
        
        CLEAN_VERSION=${VERSION#v}
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 Version: $VERSION"
        echo "🔒 Type: $BUILD_TYPE"

    # ===== ÉTAPE 2: SETUP =====
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # ===== ÉTAPE 3: CREDENTIALS SÉCURISÉS =====
    - name: 🔑 Setup Credentials
      run: |
        Write-Host "🔑 Configuration des credentials..."
        
        if (!(Test-Path "resources")) { 
          New-Item -ItemType Directory -Path "resources" 
        }
        
        $BUILD_TYPE = "${{ steps.version.outputs.build_type }}"
        
        if ($BUILD_TYPE -eq "private") {
          if ("${{ secrets.GOOGLE_CREDENTIALS_JSON }}" -ne "") {
            Write-Host "🔐 BUILD PRIVÉ: Utilisation des vrais credentials"
            
            # Créer credentials.json depuis les secrets
            $credentials = @'
        ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
        '@
            
            $credentials | Out-File -FilePath "resources/credentials.json" -Encoding UTF8
            echo "CREDENTIALS_STATUS=real" >> $env:GITHUB_ENV
          } else {
            Write-Host "❌ ERREUR: Build privé demandé mais pas de secret GOOGLE_CREDENTIALS_JSON"
            exit 1
          }
        } else {
          Write-Host "🌍 BUILD PUBLIC: Création d'un template"
          
          # Template pour build public
          $template = @'
        {
          "installed": {
            "client_id": "REMPLACEZ_PAR_VOTRE_CLIENT_ID.apps.googleusercontent.com",
            "project_id": "remplacez-par-votre-projet-id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_secret": "REMPLACEZ_PAR_VOTRE_CLIENT_SECRET",
            "redirect_uris": ["http://localhost"]
          }
        }
        '@
          
          $template | Out-File -FilePath "resources/credentials.json" -Encoding UTF8
          echo "CREDENTIALS_STATUS=template" >> $env:GITHUB_ENV
        fi
        
        echo "BUILD_TYPE=$BUILD_TYPE" >> $env:GITHUB_ENV

    - name: 📝 Créer guide utilisateur (build public)
      if: steps.version.outputs.build_type == 'public'
      run: |
        $guide = @'
        # 🔑 CONFIGURATION GOOGLE DRIVE API REQUISE
        
        ## ⚠️ ÉTAPE OBLIGATOIRE AVANT UTILISATION
        
        Cette application nécessite vos propres credentials Google Drive API.
        
        ### 🚀 Configuration Rapide (5 minutes)
        
        1. **Créer projet Google Cloud**
           - Allez sur: https://console.cloud.google.com/
           - Créez un nouveau projet
           - Activez l'API Google Drive
        
        2. **Créer credentials OAuth 2.0**
           - Dans le projet: APIs & Services > Credentials
           - Cliquez: Create Credentials > OAuth 2.0 Client ID
           - Type: Desktop Application
           - Téléchargez le fichier JSON
        
        3. **Installer vos credentials**
           - Renommez le fichier en: credentials.json
           - Remplacez le fichier credentials.json dans ce dossier
           - Lancez ZymoSync.exe
        
        ### 🔒 Pourquoi cette étape?
        Pour votre sécurité! Chaque utilisateur garde ses propres credentials privés.
        
        ### 🆘 Besoin d'aide?
        Documentation complète: https://github.com/votre-repo
        '@
        
        $guide | Out-File -FilePath "SETUP_GUIDE.txt" -Encoding UTF8

    # ===== ÉTAPE 4: BUILD =====
    - name: 🧹 Nettoyer
      run: |
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        Get-ChildItem -Filter "*.spec" | Remove-Item -Force

    - name: 🔨 Build PyInstaller
      run: |
        Write-Host "🚀 Build en cours..."
        
        pyinstaller --onedir --windowed `
          --hidden-import=googleapiclient.discovery `
          --hidden-import=googleapiclient.http `
          --hidden-import=google.auth.transport.requests `
          --hidden-import=google.oauth2.credentials `
          --hidden-import=charset_normalizer.md__mypyc `
          --hidden-import=sip `
          --collect-all PyQt5 `
          --add-data "resources\credentials.json;." `
          --name ${{ env.APP_NAME }} `
          main.py
          
        Write-Host "✅ Build terminé"

    - name: ✅ Vérification
      run: |
        $exe = "dist\${{ env.APP_NAME }}\${{ env.APP_NAME }}.exe"
        if (Test-Path $exe) {
          Write-Host "✅ Exe créé: $exe"
          $size = (Get-Item $exe).Length / 1MB
          Write-Host "📏 Taille: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ Exe non trouvé"
          exit 1
        }

    # ===== ÉTAPE 5: ARCHIVE =====
    - name: 📦 Créer ZIP
      run: |
        $VERSION = "${{ steps.version.outputs.clean_version }}"
        $TYPE = "${{ env.BUILD_TYPE }}"
        
        if ($TYPE -eq "private") {
          $NAME = "${{ env.APP_NAME }}-v$VERSION-Windows-Ready"
        } else {
          $NAME = "${{ env.APP_NAME }}-v$VERSION-Windows-Setup"
          # Ajouter le guide pour build public
          Copy-Item "SETUP_GUIDE.txt" "dist\${{ env.APP_NAME }}\"
        }
        
        $ZIP_FILE = "$NAME.zip"
        Compress-Archive -Path "dist\${{ env.APP_NAME }}\*" -DestinationPath $ZIP_FILE
        
        Write-Host "✅ ZIP créé: $ZIP_FILE"
        
        echo "ZIP_FILE=$ZIP_FILE" >> $env:GITHUB_ENV
        echo "ZIP_NAME=$NAME" >> $env:GITHUB_ENV

    # ===== ÉTAPE 6: RELEASE MODERNE (CORRIGÉE) =====
    - name: 📝 Préparer changelog
      id: changelog
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        TYPE="${{ env.BUILD_TYPE }}"
        
        BODY="## 🚀 Release $VERSION\n\n"
        BODY+="📅 **Date**: $(date '+%Y-%m-%d %H:%M')\n"
        BODY+="🔒 **Type**: $(echo $TYPE | tr '[:lower:]' '[:upper:]') build\n\n"
        
        if [[ "$TYPE" == "private" ]]; then
          BODY+="### ✅ Prêt à Utiliser\n"
          BODY+="Build avec credentials intégrés - lancez directement l'exe!\n\n"
        else
          BODY+="### ⚙️ Configuration Requise\n"
          BODY+="**IMPORTANT**: Suivez les instructions dans SETUP_GUIDE.txt\n"
          BODY+="Vous devez configurer vos credentials Google Drive API.\n\n"
        fi
        
        BODY+="### 📦 Installation\n"
        BODY+="1. Téléchargez le ZIP ci-dessous\n"
        BODY+="2. Extrayez dans un dossier\n"
        if [[ "$TYPE" == "public" ]]; then
          BODY+="3. **OBLIGATOIRE**: Suivez SETUP_GUIDE.txt\n"
          BODY+="4. Lancez ${{ env.APP_NAME }}.exe\n"
        else
          BODY+="3. Lancez ${{ env.APP_NAME }}.exe\n"
        fi
        
        # Échapper pour JSON
        BODY_ESCAPED=$(echo -e "$BODY" | sed 's/"/\\"/g' | tr '\n' ' ')
        echo "body=$BODY_ESCAPED" >> $GITHUB_OUTPUT

    - name: 🎉 Créer Release (API Moderne)
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const tag = "${{ steps.version.outputs.version }}";
          const name = "🚀 ${{ env.APP_NAME }} ${{ steps.version.outputs.version }}";
          const body = `${{ steps.changelog.outputs.body }}`;
          
          console.log('🎯 Création de la release...');
          console.log('Tag:', tag);
          console.log('Nom:', name);
          
          try {
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name: name,
              body: body,
              draft: false,
              prerelease: false
            });
            
            console.log('✅ Release créée:', release.data.html_url);
            
            // Stocker l'ID et URL pour l'étape suivante
            core.setOutput('release_id', release.data.id);
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('html_url', release.data.html_url);
            
          } catch (error) {
            console.error('❌ Erreur création release:', error);
            throw error;
          }

    - name: 📎 Upload ZIP vers Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const zipFile = '${{ env.ZIP_FILE }}';
          const uploadUrl = '${{ steps.create_release.outputs.upload_url }}';
          
          console.log('📎 Upload du ZIP:', zipFile);
          
          try {
            // Lire le fichier
            const data = fs.readFileSync(zipFile);
            
            // Upload vers la release
            const response = await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl,
              headers: {
                'content-type': 'application/zip',
                'content-length': data.length
              },
              name: path.basename(zipFile),
              data: data
            });
            
            console.log('✅ ZIP uploadé:', response.data.browser_download_url);
            
          } catch (error) {
            console.error('❌ Erreur upload ZIP:', error);
            throw error;
          }

    # ===== ÉTAPE 7: CONFIRMATION =====
    - name: 🎉 Confirmation
      run: |
        Write-Host "🎉 RELEASE CRÉÉE AVEC SUCCÈS! 🎉"
        Write-Host ""
        Write-Host "📦 Version: ${{ steps.version.outputs.version }}"
        Write-Host "🔒 Type: ${{ env.BUILD_TYPE }}"
        Write-Host "📁 ZIP: ${{ env.ZIP_FILE }}"
        Write-Host "🔗 Release: ${{ steps.create_release.outputs.html_url }}"
        Write-Host ""
        Write-Host "✅ Votre app est maintenant disponible au téléchargement!"