# 🚀 Auto-Release PRIVÉ UNIQUEMENT
name: Auto Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'test-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version à releaser (ex: v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read

env:
  APP_NAME: "ZymoSync"
  PYTHON_VERSION: "3.9"

jobs:
  private-build:
    name: 🔨 Build Privé avec Credentials
    runs-on: windows-latest

    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🏷️ Extraire la version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        CLEAN_VERSION=${VERSION#v}
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 Version: $VERSION"

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # ===== CREDENTIALS PRIVÉS UNIQUEMENT =====
    - name: 🔑 Setup Credentials Privés
      shell: bash
      run: |
        echo "🔐 Configuration des credentials privés..."
        
        # Créer le dossier resources
        mkdir -p resources
        
        # Vérifier que le secret existe
        if [[ -z "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" ]]; then
          echo "❌ ERREUR: Secret GOOGLE_CREDENTIALS_JSON manquant!"
          echo "📝 Pour corriger:"
          echo "   1. Allez dans Settings > Secrets and variables > Actions"
          echo "   2. Cliquez 'New repository secret'"
          echo "   3. Nom: GOOGLE_CREDENTIALS_JSON"
          echo "   4. Valeur: Collez le contenu de votre credentials.json"
          exit 1
        fi
        
        echo "✅ Secret trouvé, création du fichier credentials..."
        
        # Écrire le JSON depuis les secrets (méthode sécurisée)
        echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > resources/credentials.json
        
        # Vérifier que le JSON est valide
        if python -m json.tool resources/credentials.json > /dev/null 2>&1; then
          echo "✅ Credentials JSON valide"
        else
          echo "❌ ERREUR: JSON credentials invalide dans le secret"
          echo "🔍 Vérifiez que le secret contient un JSON valide"
          exit 1
        fi
        
        # Vérifier la présence des clés importantes
        if grep -q "client_id" resources/credentials.json && grep -q "client_secret" resources/credentials.json; then
          echo "✅ Credentials semblent complets (client_id et client_secret trouvés)"
        else
          echo "⚠️ WARNING: client_id ou client_secret non trouvés dans les credentials"
        fi
        
        echo "✅ Credentials privés configurés avec succès"

    - name: 🧹 Nettoyer les anciens builds
      run: |
        Write-Host "🧹 Nettoyage..."
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        Get-ChildItem -Filter "*.spec" | Remove-Item -Force
        Write-Host "✅ Nettoyage terminé"

    - name: 🔨 Build avec PyInstaller
      run: |
        Write-Host "🚀 Build privé en cours..."
        
        pyinstaller --onedir --windowed `
          --hidden-import=googleapiclient.discovery `
          --hidden-import=googleapiclient.http `
          --hidden-import=google.auth.transport.requests `
          --hidden-import=google.oauth2.credentials `
          --hidden-import=charset_normalizer.md__mypyc `
          --hidden-import=sip `
          --collect-all PyQt5 `
          --add-data "resources\credentials.json;." `
          --name ${{ env.APP_NAME }} `
          main.py
          
        Write-Host "✅ Build terminé avec succès"

    - name: ✅ Vérifier le build
      run: |
        $exePath = "dist\${{ env.APP_NAME }}\${{ env.APP_NAME }}.exe"
        $credPath = "dist\${{ env.APP_NAME }}\credentials.json"
        
        if (Test-Path $exePath) {
          Write-Host "✅ Exécutable créé: $exePath"
          $size = (Get-Item $exePath).Length / 1MB
          Write-Host "📏 Taille exe: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ Exécutable non trouvé!"
          Write-Host "📁 Contenu de dist:"
          Get-ChildItem -Path "dist" -Recurse
          exit 1
        }
        
        if (Test-Path $credPath) {
          Write-Host "✅ Credentials inclus dans le build"
        } else {
          Write-Host "❌ WARNING: credentials.json non trouvé dans le build"
        }
        
        # Afficher la structure du build
        Write-Host "📁 Structure du build final:"
        Get-ChildItem -Path "dist\${{ env.APP_NAME }}" | Select-Object Name, Length | Format-Table

    - name: 📦 Créer ZIP prêt à utiliser
      run: |
        $VERSION = "${{ steps.version.outputs.clean_version }}"
        $ZIP_NAME = "${{ env.APP_NAME }}-v$VERSION-Windows-READY"
        $ZIP_FILE = "$ZIP_NAME.zip"
        
        Write-Host "📦 Création du ZIP prêt à utiliser..."
        
        # Créer un README pour le ZIP
        $readme = @"
# 🚀 ${{ env.APP_NAME }} v$VERSION - PRÊT À UTILISER
