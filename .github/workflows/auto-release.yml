# 🚀 Auto-Release PRIVÉ UNIQUEMENT
name: Auto Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'test-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version à releaser (ex: v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read

env:
  APP_NAME: "ZymoSync"
  PYTHON_VERSION: "3.9"

jobs:
  private-build:
    name: 🔨 Build Privé avec Credentials
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🏷️ Extraire la version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        CLEAN_VERSION=${VERSION#v}
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 Version: $VERSION"
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # ===== CREDENTIALS PRIVÉS UNIQUEMENT =====
    - name: 🔑 Setup Credentials Privés
      shell: bash
      run: |
        echo "🔐 Configuration des credentials privés..."
        
        # Créer le dossier resources
        mkdir -p resources
        
        # Vérifier que le secret existe
        if [[ -z "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" ]]; then
          echo "❌ ERREUR: Secret GOOGLE_CREDENTIALS_JSON manquant!"
          echo "📝 Pour corriger:"
          echo "   1. Allez dans Settings > Secrets and variables > Actions"
          echo "   2. Cliquez 'New repository secret'"
          echo "   3. Nom: GOOGLE_CREDENTIALS_JSON"
          echo "   4. Valeur: Collez le contenu de votre credentials.json"
          exit 1
        fi
        
        echo "✅ Secret trouvé, création du fichier credentials..."
        
        # Écrire le JSON depuis les secrets (méthode sécurisée)
        echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > resources/credentials.json
        
        # Vérifier que le JSON est valide
        if python -m json.tool resources/credentials.json > /dev/null 2>&1; then
          echo "✅ Credentials JSON valide"
        else
          echo "❌ ERREUR: JSON credentials invalide dans le secret"
          echo "🔍 Vérifiez que le secret contient un JSON valide"
          exit 1
        fi
        
        # Vérifier la présence des clés importantes
        if grep -q "client_id" resources/credentials.json && grep -q "client_secret" resources/credentials.json; then
          echo "✅ Credentials semblent complets (client_id et client_secret trouvés)"
        else
          echo "⚠️ WARNING: client_id ou client_secret non trouvés dans les credentials"
        fi
        
        echo "✅ Credentials privés configurés avec succès"
        
    - name: 🧹 Nettoyer les anciens builds
      run: |
        Write-Host "🧹 Nettoyage..."
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        Get-ChildItem -Filter "*.spec" | Remove-Item -Force
        Write-Host "✅ Nettoyage terminé"
        
    - name: 🔨 Build avec PyInstaller
      run: |
        Write-Host "🚀 Build privé en cours..."
        
        pyinstaller --onedir --windowed `
          --hidden-import=googleapiclient.discovery `
          --hidden-import=googleapiclient.http `
          --hidden-import=google.auth.transport.requests `
          --hidden-import=google.oauth2.credentials `
          --hidden-import=charset_normalizer.md__mypyc `
          --hidden-import=sip `
          --collect-all PyQt5 `
          --add-data "resources\credentials.json;." `
          --name ${{ env.APP_NAME }} `
          main.py
          
        Write-Host "✅ Build terminé avec succès"
        
    - name: ✅ Vérifier le build
      run: |
        $exePath = "dist\${{ env.APP_NAME }}\${{ env.APP_NAME }}.exe"
        $credPath = "dist\${{ env.APP_NAME }}\credentials.json"
        
        if (Test-Path $exePath) {
          Write-Host "✅ Exécutable créé: $exePath"
          $size = (Get-Item $exePath).Length / 1MB
          Write-Host "📏 Taille exe: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "❌ Exécutable non trouvé!"
          Write-Host "📁 Contenu de dist:"
          Get-ChildItem -Path "dist" -Recurse
          exit 1
        }
        
        if (Test-Path $credPath) {
          Write-Host "✅ Credentials inclus dans le build"
        } else {
          Write-Host "❌ WARNING: credentials.json non trouvé dans le build"
        }
        
        # Afficher la structure du build
        Write-Host "📁 Structure du build final:"
        Get-ChildItem -Path "dist\${{ env.APP_NAME }}" | Select-Object Name, Length | Format-Table
        
    - name: 📦 Créer ZIP prêt à utiliser
      run: |
        $VERSION = "${{ steps.version.outputs.clean_version }}"
        $ZIP_NAME = "${{ env.APP_NAME }}-v$VERSION-Windows-READY"
        $ZIP_FILE = "$ZIP_NAME.zip"
        
        Write-Host "📦 Création du ZIP prêt à utiliser..."
        
        # Créer un README pour le ZIP
        $readme = @"
              # 🚀 ${{ env.APP_NAME }} v$VERSION - PRÊT À UTILISER
              
              ## ✅ Installation Immédiate
                
                1. **Extraire** ce ZIP dans un dossier de votre choix
              2. **Lancer** ${{ env.APP_NAME }}.exe
              3. **Autoriser** l'accès Google Drive au premier lancement
              4. **C'est tout !** L'application est prête à utiliser
              
              ## 🔑 Credentials Inclus
              
              Cette version inclut vos credentials Google Drive API personnels.
              Aucune configuration supplémentaire n'est nécessaire.
              
              ## 🆘 Support
              
              - Documentation: https://github.com/${{ github.repository }}
              - Issues: https://github.com/${{ github.repository }}/issues
              
              ---
              Build privé généré automatiquement le $(Get-Date -Format "yyyy-MM-dd HH:mm")
        "@
        
        $readme | Out-File -FilePath "dist\${{ env.APP_NAME }}\README.txt" -Encoding UTF8
        
        # Créer le ZIP
        Compress-Archive -Path "dist\${{ env.APP_NAME }}\*" -DestinationPath $ZIP_FILE -Force
        
        if (Test-Path $ZIP_FILE) {
          $zipSize = (Get-Item $ZIP_FILE).Length / 1MB
          Write-Host "✅ ZIP créé: $ZIP_FILE"
          Write-Host "📏 Taille ZIP: $([math]::Round($zipSize, 1)) MB"
        } else {
          Write-Host "❌ Erreur: ZIP non créé"
          exit 1
        }
        
        echo "ZIP_FILE=$ZIP_FILE" >> $env:GITHUB_ENV
        echo "ZIP_NAME=$ZIP_NAME" >> $env:GITHUB_ENV
        
    - name: 📝 Générer changelog
      id: changelog
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        BODY="## 🚀 ${{ env.APP_NAME }} $VERSION - Build Privé\n\n"
        BODY+="📅 **Date**: $(date '+%Y-%m-%d %H:%M:%S')\n"
        BODY+="🔐 **Type**: Build privé avec credentials intégrés\n\n"
        
        BODY+="### ✅ Prêt à Utiliser Immédiatement\n\n"
        BODY+="Cette version inclut vos credentials Google Drive API personnels.\n"
        BODY+="Aucune configuration supplémentaire n'est requise!\n\n"
        
        BODY+="### 🚀 Installation Ultra-Simple\n\n"
        BODY+="1. **Téléchargez** le ZIP ci-dessous\n"
        BODY+="2. **Extrayez** dans un dossier de votre choix\n"
        BODY+="3. **Double-cliquez** sur \`${{ env.APP_NAME }}.exe\`\n"
        BODY+="4. **Autorisez** Google Drive au premier lancement\n"
        BODY+="5. **Enjoy!** 🎉\n\n"
        
        # Ajouter les changements depuis la dernière version
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [[ -n "$PREVIOUS_TAG" ]]; then
          BODY+="### 🔄 Nouveautés depuis $PREVIOUS_TAG\n\n"
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          if [[ -n "$COMMITS" ]]; then
            BODY+="$COMMITS\n\n"
          else
            BODY+="- Améliorations internes et corrections\n\n"
          fi
        else
          BODY+="### 🎉 Première Release Automatique!\n\n"
          BODY+="- Interface moderne avec thème sombre\n"
          BODY+="- Navigation bifurcée (local ↔ Google Drive)\n"
          BODY+="- Drag & Drop intuitif\n"
          BODY+="- Gestionnaire de transferts avancé\n"
          BODY+="- Support des Shared Drives d'entreprise\n\n"
        fi
        
        BODY+="### 📦 Détails Techniques\n\n"
        BODY+="- **Plateforme**: Windows x64\n"
        BODY+="- **Python**: ${{ env.PYTHON_VERSION }}\n"
        BODY+="- **PyQt5**: Inclus\n"
        BODY+="- **Credentials**: Intégrés (prêt à utiliser)\n"
        BODY+="- **Fichier**: \`${{ env.ZIP_FILE }}\`\n\n"
        
        BODY+="### 🔒 Sécurité\n\n"
        BODY+="Ce build privé contient vos credentials personnels Google Drive.\n"
        BODY+="Ne partagez pas ce fichier avec d'autres personnes.\n\n"
        
        BODY+="---\n\n"
        BODY+="💡 **Besoin d'aide?** Consultez le README.txt inclus dans le ZIP!"
        
        # Échapper pour JSON (méthode simple)
        BODY_ESCAPED=$(echo -e "$BODY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr '\n' ' ')
        echo "body=$BODY_ESCAPED" >> $GITHUB_OUTPUT
        
    - name: 🎉 Créer Release Privée
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const tag = "${{ steps.version.outputs.version }}";
          const name = "🔐 ${{ env.APP_NAME }} ${{ steps.version.outputs.version }} (Privé)";
          const body = `${{ steps.changelog.outputs.body }}`;
          
          console.log('🎯 Création de la release privée...');
          console.log('Tag:', tag);
          console.log('Nom:', name);
          
          try {
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name: name,
              body: body,
              draft: false,
              prerelease: false
            });
            
            console.log('✅ Release créée:', release.data.html_url);
            
            core.setOutput('release_id', release.data.id);
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('html_url', release.data.html_url);
            
          } catch (error) {
            console.error('❌ Erreur création release:', error);
            throw error;
          }
          
    - name: 📎 Upload ZIP vers Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const zipFile = '${{ env.ZIP_FILE }}';
          const uploadUrl = '${{ steps.create_release.outputs.upload_url }}';
          
          console.log('📎 Upload du ZIP privé:', zipFile);
          
          try {
            const data = fs.readFileSync(zipFile);
            
            const response = await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl,
              headers: {
                'content-type': 'application/zip',
                'content-length': data.length
              },
              name: path.basename(zipFile),
              data: data
            });
            
            console.log('✅ ZIP uploadé:', response.data.browser_download_url);
            
          } catch (error) {
            console.error('❌ Erreur upload ZIP:', error);
            throw error;
          }
          
    - name: 🎉 Confirmation Finale
      run: |
        Write-Host ""
        Write-Host "🎉🎉🎉 BUILD PRIVÉ CRÉÉ AVEC SUCCÈS! 🎉🎉🎉"
        Write-Host ""
        Write-Host "📦 Version: ${{ steps.version.outputs.version }}"
        Write-Host "📁 Fichier: ${{ env.ZIP_FILE }}"
        Write-Host "🔗 Release: ${{ steps.create_release.outputs.html_url }}"
        Write-Host ""
        Write-Host "✅ PRÊT À UTILISER:"
        Write-Host "   1. Téléchargez le ZIP depuis GitHub"
        Write-Host "   2. Extrayez et lancez ${{ env.APP_NAME }}.exe"
        Write-Host "   3. Autorisez Google Drive"
        Write-Host "   4. Enjoy! 🚀"
        Write-Host ""
        Write-Host "🔐 Build privé avec VOS credentials inclus"
        Write-Host "⚠️  Ne partagez pas ce ZIP (contient vos clés privées)"