# üì§ Workflow s√©par√© pour l'upload vers Google Drive
name: Upload to Google Drive

on:
  # Se d√©clenche quand une release est publi√©e
  release:
    types: [published]
  
  # Permet aussi le d√©clenchement manuel
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag de la release √† uploader (ex: v1.0.0)'
        required: true
        type: string

permissions:
  contents: read

env:
  # ID du dossier Google Drive cible
  GDRIVE_FOLDER_ID: "1EMQfuyMNHNc3170KXiSbyalx9HbQX5SN"

jobs:
  upload-to-gdrive:
    name: üì§ Upload vers Google Drive
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: üè∑Ô∏è D√©terminer la version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.release_tag }}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ Version √† uploader: $VERSION"

    - name: üìã R√©cup√©rer les assets de la release
      id: get_assets
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "üîç Recherche des assets pour la release $VERSION..."
        
        # R√©cup√©rer les informations de la release via l'API GitHub
        RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION")
        
        # Extraire les URLs des assets ZIP
        ZIP_ASSETS=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | test(".*\\.zip$")) | {name: .name, url: .browser_download_url}')
        
        if [[ -z "$ZIP_ASSETS" || "$ZIP_ASSETS" == "null" ]]; then
          echo "‚ùå Aucun fichier ZIP trouv√© dans la release $VERSION"
          echo "üìã Assets disponibles:"
          echo "$RELEASE_INFO" | jq -r '.assets[].name'
          exit 1
        fi
        
        # Sauvegarder les infos des assets
        echo "$ZIP_ASSETS" > assets.json
        echo "‚úÖ Assets ZIP trouv√©s:"
        echo "$ZIP_ASSETS" | jq -r '.name'
        
        # Compter le nombre d'assets
        ASSET_COUNT=$(echo "$ZIP_ASSETS" | jq -s 'length')
        echo "asset_count=$ASSET_COUNT" >> $GITHUB_OUTPUT

    - name: üì• T√©l√©charger les assets
      run: |
        echo "üì• T√©l√©chargement des assets..."
        
        mkdir -p downloads
        
        # Lire chaque asset et le t√©l√©charger
        while IFS= read -r asset; do
          if [[ -n "$asset" && "$asset" != "null" ]]; then
            ASSET_NAME=$(echo "$asset" | jq -r '.name')
            ASSET_URL=$(echo "$asset" | jq -r '.url')
            
            echo "‚¨áÔ∏è T√©l√©chargement: $ASSET_NAME"
            
            # T√©l√©charger avec authentification GitHub
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              -o "downloads/$ASSET_NAME" \
              "$ASSET_URL"
            
            if [[ -f "downloads/$ASSET_NAME" ]]; then
              SIZE=$(stat -c%s "downloads/$ASSET_NAME" 2>/dev/null || stat -f%z "downloads/$ASSET_NAME" 2>/dev/null || echo "0")
              SIZE_MB=$((SIZE / 1024 / 1024))
              echo "‚úÖ T√©l√©charg√©: $ASSET_NAME (${SIZE_MB} MB)"
            else
              echo "‚ùå √âchec t√©l√©chargement: $ASSET_NAME"
            fi
          fi
        done < <(cat assets.json | jq -c '.')

    - name: üîë Setup Service Account Google Drive
      run: |
        echo "üîë Configuration du service account Google Drive..."
        
        # V√©rifier que le secret existe
        if [[ -z "${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT }}" ]]; then
          echo "‚ùå ERREUR: Secret GOOGLE_DRIVE_SERVICE_ACCOUNT manquant!"
          echo "üìù Pour ajouter le secret:"
          echo "   1. Allez dans Settings > Secrets and variables > Actions"
          echo "   2. Cliquez 'New repository secret'"
          echo "   3. Nom: GOOGLE_DRIVE_SERVICE_ACCOUNT"
          echo "   4. Valeur: Collez le contenu JSON de votre service account"
          exit 1
        fi
        
        # Cr√©er le fichier service account
        echo '${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT }}' > service-account.json
        
        # V√©rifier que le JSON est valide
        if python -c "import json; json.load(open('service-account.json'))" 2>/dev/null; then
          echo "‚úÖ Service Account JSON valide"
        else
          echo "‚ùå ERREUR: JSON service account invalide"
          exit 1
        fi
        
        # Afficher l'email du service account (pour debug)
        SERVICE_EMAIL=$(python -c "import json; print(json.load(open('service-account.json'))['client_email'])")
        echo "üìß Service Account Email: $SERVICE_EMAIL"
        echo "üìÅ Dossier cible ID: ${{ env.GDRIVE_FOLDER_ID }}"

    - name: üì¶ Installer d√©pendances Google Drive
      run: |
        echo "üì¶ Installation des d√©pendances..."
        pip install google-api-python-client google-auth

    - name: üöÄ Upload vers Google Drive
      run: |
        echo "üöÄ D√©marrage de l'upload vers Google Drive..."
        
        # Cr√©er le script d'upload Python optimis√©
        cat > gdrive_upload.py << 'SCRIPT_EOF'
        import os
        import json
        import glob
        from google.oauth2.service_account import Credentials
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        from googleapiclient.errors import HttpError
        
        def main():
            print("üîê Authentification avec Google Drive...")
            
            try:
                # Configuration
                SERVICE_ACCOUNT_FILE = 'service-account.json'
                SCOPES = ['https://www.googleapis.com/auth/drive']
                TARGET_FOLDER_ID = os.environ.get('GDRIVE_FOLDER_ID')
                VERSION = os.environ.get('VERSION')
                
                if not TARGET_FOLDER_ID:
                    print("‚ùå GDRIVE_FOLDER_ID non d√©fini")
                    return False
                
                # Authentification
                credentials = Credentials.from_service_account_file(
                    SERVICE_ACCOUNT_FILE, scopes=SCOPES
                )
                service = build('drive', 'v3', credentials=credentials)
                print("‚úÖ Authentification r√©ussie")
                
                # V√©rifier l'acc√®s au dossier cible
                try:
                    folder_info = service.files().get(
                        fileId=TARGET_FOLDER_ID,
                        fields='id,name,parents'
                    ).execute()
                    print(f"‚úÖ Acc√®s au dossier: {folder_info['name']} (ID: {TARGET_FOLDER_ID})")
                except HttpError as e:
                    print(f"‚ùå Impossible d'acc√©der au dossier {TARGET_FOLDER_ID}: {e}")
                    print("üîç V√©rifiez que le dossier est partag√© avec le service account")
                    return False
                
                # Trouver tous les fichiers ZIP √† uploader
                zip_files = glob.glob('downloads/*.zip')
                if not zip_files:
                    print("‚ùå Aucun fichier ZIP trouv√© dans downloads/")
                    return False
                
                print(f"üìÅ {len(zip_files)} fichier(s) √† uploader:")
                for zip_file in zip_files:
                    print(f"  - {os.path.basename(zip_file)}")
                
                uploaded_files = []
                
                # Uploader chaque fichier
                for zip_file in zip_files:
                    file_name = os.path.basename(zip_file)
                    file_size = os.path.getsize(zip_file) / (1024 * 1024)  # MB
                    
                    print(f"\n‚¨ÜÔ∏è Upload: {file_name} ({file_size:.1f} MB)")
                    
                    # V√©rifier si le fichier existe d√©j√† et le supprimer
                    existing_files = service.files().list(
                        q=f"name='{file_name}' and '{TARGET_FOLDER_ID}' in parents and trashed=false",
                        fields="files(id, name)"
                    ).execute()
                    
                    for existing_file in existing_files.get('files', []):
                        print(f"üóëÔ∏è Suppression de l'ancienne version: {existing_file['name']}")
                        service.files().delete(fileId=existing_file['id']).execute()
                    
                    # Upload du nouveau fichier
                    file_metadata = {
                        'name': file_name,
                        'parents': [TARGET_FOLDER_ID]
                    }
                    
                    try:
                        media = MediaFileUpload(zip_file, resumable=True)
                        file_result = service.files().create(
                            body=file_metadata,
                            media_body=media,
                            fields='id,name,webViewLink,size'
                        ).execute()
                        
                        # R√©sultats
                        file_id = file_result.get('id')
                        web_link = file_result.get('webViewLink')
                        uploaded_size = int(file_result.get('size', 0)) / (1024 * 1024)
                        
                        print(f"‚úÖ Upload r√©ussi!")
                        print(f"   üìÑ Nom: {file_result.get('name')}")
                        print(f"   üÜî ID: {file_id}")
                        print(f"   üìè Taille: {uploaded_size:.1f} MB")
                        print(f"   üîó Lien: {web_link}")
                        
                        uploaded_files.append({
                            'name': file_name,
                            'id': file_id,
                            'link': web_link,
                            'size_mb': uploaded_size
                        })
                        
                    except Exception as e:
                        print(f"‚ùå Erreur upload {file_name}: {e}")
                        continue
                
                # Sauvegarder les r√©sultats
                if uploaded_files:
                    with open('upload_results.json', 'w') as f:
                        json.dump({
                            'version': VERSION,
                            'folder_id': TARGET_FOLDER_ID,
                            'uploaded_files': uploaded_files,
                            'total_files': len(uploaded_files),
                            'total_size_mb': sum(f['size_mb'] for f in uploaded_files)
                        }, f, indent=2)
                    
                    print(f"\nüéâ Upload termin√©!")
                    print(f"üìä {len(uploaded_files)} fichier(s) upload√©(s)")
                    print(f"üìè Taille totale: {sum(f['size_mb'] for f in uploaded_files):.1f} MB")
                    return True
                else:
                    print("‚ùå Aucun fichier n'a pu √™tre upload√©")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Erreur g√©n√©rale: {e}")
                return False
        
        if __name__ == "__main__":
            success = main()
            exit(0 if success else 1)
        SCRIPT_EOF
        
        # Ex√©cuter l'upload
        VERSION="${{ steps.version.outputs.version }}" \
        GDRIVE_FOLDER_ID="${{ env.GDRIVE_FOLDER_ID }}" \
        python gdrive_upload.py

    - name: üìã R√©sum√© de l'upload
      if: always()
      run: |
        echo "üìã === R√âSUM√â DE L'UPLOAD ==="
        echo ""
        
        if [[ -f "upload_results.json" ]]; then
          echo "‚úÖ Upload r√©ussi!"
          echo ""
          
          VERSION=$(cat upload_results.json | jq -r '.version')
          TOTAL_FILES=$(cat upload_results.json | jq -r '.total_files')
          TOTAL_SIZE=$(cat upload_results.json | jq -r '.total_size_mb')
          
          echo "üì¶ Version: $VERSION"
          echo "üìÅ Fichiers upload√©s: $TOTAL_FILES"
          echo "üìè Taille totale: ${TOTAL_SIZE} MB"
          echo "üìÇ Dossier Google Drive: https://drive.google.com/drive/folders/${{ env.GDRIVE_FOLDER_ID }}"
          echo ""
          echo "üîó Liens directs:"
          
          cat upload_results.json | jq -r '.uploaded_files[] | "   üìÑ \(.name): \(.link)"'
          
        else
          echo "‚ùå Upload √©chou√© ou aucun fichier upload√©"
          echo ""
          echo "üîç V√©rifiez:"
          echo "   1. Que la release contient des fichiers ZIP"
          echo "   2. Que le service account a acc√®s au dossier"
          echo "   3. Que l'ID du dossier est correct: ${{ env.GDRIVE_FOLDER_ID }}"
        fi